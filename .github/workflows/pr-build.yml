name: PR Build

on:
  pull_request:
    types: [ 'opened', 'reopened', 'synchronize', 'ready_for_review' ]
    branches:
      - main

jobs:
  lint:
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
      - name: Setup Environment
        uses: ./.github/actions/setup
      - name: Run linting
        run: pnpm lint

  test:
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
      - name: Setup Environment
        uses: ./.github/actions/setup
      - name: Run tests
        run: pnpm test:coverage

  e2e-test:
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
      - name: Setup Environment
        uses: ./.github/actions/setup
      - name: Run tests
        run: pnpm test:e2e

  build:
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
      - name: Setup Environment
        uses: ./.github/actions/setup
      - name: Run build
        run: pnpm build

  security-scan:
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
      - name: Setup Environment
        uses: ./.github/actions/setup
      - name: Run build
        run: pnpm audit

  deploy:
    runs-on: ubuntu-latest
    env:
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
      - name: Setup Environment
        uses: ./.github/actions/setup
      - name: Run build
        run: pnpm build
      - name: Generate .env file
        run: |
          touch .env
          echo APP_CODE=${{ secrets.APP_CODE }} >> .env
          echo JWT_SECRET=${{ secrets.JWT_SECRET }} >> .env
          echo DATABASE_URL=${{ secrets.DATABASE_URL }} >> .env
          echo HASHING_ROUNDS=${{ secrets.HASHING_ROUNDS }} >> .env
      - name: Install Vercel CLI
        run: npm i -g vercel
      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
      - name: Deploy Project Artifacts to Vercel
        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}
